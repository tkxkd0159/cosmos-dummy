FROM --platform=linux ubuntu:22.04 as base
ARG BUILDARCH

ENV GO_VERSION=1.19.4
ENV IGNITE_VERSION=0.26.1
ENV NODE_VERSION=18.x
ENV MOCKGEN_VERSION=1.6.0
ENV PROTOC_VERSION=22.3

FROM base AS platform-amd64
ENV PROTOC_PLATFORM=x86_64
FROM base AS platform-arm64
ENV PROTOC_PLATFORM=aarch_64

FROM platform-${BUILDARCH}

ENV LOCAL=/usr/local
ENV GOROOT=$LOCAL/go
ENV HOME=/root
ENV GOPATH=$HOME/go
ENV PATH=$GOROOT/bin:$GOPATH/bin:$PATH

RUN mkdir -p $GOPATH/bin

ENV PACKAGES curl gcc jq make unzip
RUN apt-get update
RUN apt-get install -y $PACKAGES

# Install Go
RUN curl -L https://go.dev/dl/go${GO_VERSION}.linux-$BUILDARCH.tar.gz | tar -C $LOCAL -xzf -

# Install Ignite
RUN curl -L https://get.ignite.com/cli@v${IGNITE_VERSION}! | bash

# Install Node
RUN curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | bash -
RUN apt-get install -y nodejs

# Install Mockgen
RUN go install github.com/golang/mock/mockgen@v${MOCKGEN_VERSION}

# Install ProtoC
RUN mkdir -p /usr/lib/protoc
WORKDIR /usr/lib/protoc
RUN curl -L https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-${PROTOC_PLATFORM}.zip -o protoc.zip
RUN unzip -o protoc.zip
RUN rm protoc.zip
RUN ln -s /usr/lib/protoc/bin/protoc ${LOCAL}/bin/protoc

EXPOSE 1317 3000 4500 5000 26657

WORKDIR /app

# 1. Create the image
# $ docker build -f Dockerfile-ubuntu . -t chainsdk
# 2. Create used-defined bridge network
# $ docker network create dummychain-net
# 3. Build container
# $ docker create --name dummychain1 -i -v ./dummychain1:/app -w /app --network dummychain-net chainsdk  // RPC_URL="http://<container_name>:26657" between used-defined network's containers
# $ docker start dummychain
# $ docker exec -it dummychain1 ignite scaffold chain <chain_name>
# 4. Run server on it
# $ docker exec -it -w /app/<chain_name> dummychain1 ignite chain serve --reset-once
# In other shell, to query it
# $ docker exec -it dummychain1 bash -c "<chain_name>d status 2>&1 | jq"